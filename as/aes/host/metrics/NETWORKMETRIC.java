package generatedbyassl.as.aes.host.metrics;

import java.io.Serializable;
import generatedbyassl.as.ASSLMETRIC;
import java.lang.Float;

/**
 * Generated by ASSL Framework
 * 
 * This is the Java class generated for 'NetworkMetric' (specified as METRIC ASSL tier).
 */
public class NETWORKMETRIC
	extends ASSLMETRIC
	implements  Serializable
{

	/**
	 * Generated by ASSL Framework
	 * 
	 * This is a reference to the unique instance of 'NETWORKMETRIC' class.
	 */
	static private NETWORKMETRIC oInstance = null;
	/**
	 * Generated by ASSL Framework
	 * 
	 * Needed by the class because it implements the Serializable interface.
	 */
	static final long serialVersionUID = 0001L;
	/**
	 * Generated by ASSL Framework
	 * 
	 * The metric's value - ASSL VALUE {} clause.
	 */
	public Float VALUE = new Float(100);
	/**
	 * Generated by ASSL Framework
	 * 
	 * Holds the old VALUE of the metric.
	 */
	protected Float oldVALUE = new Float(100);

	/**
	 * Generated by ASSL Framework
	 * 
	 * Because this is a singleton class its constructor is private.
	 */
	private  NETWORKMETRIC (  )
	{
		METRIC_TYPE = "RESOURCE";
		DESCRIPTION = "";
		MEASURE_UNIT = "";
	}

	/**
	 * Generated by ASSL Framework
	 * 
	 * This method returns the unique instance of 'NETWORKMETRIC' class.
	 */
	static public NETWORKMETRIC getInstance (  )
	{
		if ( null == oInstance ) 
		{
			oInstance = new NETWORKMETRIC();
		}
		return oInstance;
	}

	/**
	 * Generated by ASSL Framework
	 * 
	 * Checks whether the metric is valid. A metric is considered valid (true) iff the value it is holding satisfies all the threshold class values.
	 */
	public synchronized boolean isValid (  )
	{
		boolean bValid = false;
		int iEql = VALUE.compareTo(  new Float( 0.001 ) );
		if ( iEql >= 0 ) 
		{
			bValid = true;
		}
		else
		{
			bValid = false;
		}
		return bValid;
	}

	/**
	 * Generated by ASSL Framework
	 * 
	 * Updates the metric value.
	 */
	public synchronized void refresh (  )
	{
		//**** checks if the metric has changed its VALUE since the last refresh
		int iEql = VALUE.compareTo( oldVALUE );
		if ( iEql == 0 ) 
		{
			bHasChanged = false;
		}
		else
		{
			oldVALUE = new Float( VALUE.floatValue() );
			bHasChanged = true;
		}
	}

}