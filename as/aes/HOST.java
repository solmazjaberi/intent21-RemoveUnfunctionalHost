package generatedbyassl.as.aes;

import java.io.Serializable;
import generatedbyassl.as.ASSLAE;
import generatedbyassl.as.aes.host.controlloop.*;

/**
 * Generated by ASSL Framework
 * 
 * This is the Java class generated for 'Host' (specified as AE ASSL tier).
 */
public class HOST
	extends ASSLAE
	implements  Serializable
{

	/**
	 * Generated by ASSL Framework
	 * 
	 * This is a reference to the unique instance of 'HOST' class.
	 */
	static private HOST oInstance = null;
	/**
	 * Generated by ASSL Framework
	 * 
	 * Needed by the class because it implements the Serializable interface.
	 */
	static final long serialVersionUID = 0001L;
	/**
	 * Generated by ASSL Framework
	 * 
	 * Holds a reference to the AE control loop's monitor.
	 */
	private HOST_ASSLMONITOR oMonitor = new HOST_ASSLMONITOR();
	/**
	 * Generated by ASSL Framework
	 * 
	 * Holds a reference to the AE control loop's analyzer.
	 */
	private HOST_ASSLANALYZER oAnalyzer = new HOST_ASSLANALYZER();
	/**
	 * Generated by ASSL Framework
	 * 
	 * Holds a reference to the AE control loop's simulator.
	 */
	private HOST_ASSLSIMULATOR oSimulator = new HOST_ASSLSIMULATOR();
	/**
	 * Generated by ASSL Framework
	 * 
	 * Holds a reference to the AE control loop's executor.
	 */
	private HOST_ASSLEXECUTOR oExecutor = new HOST_ASSLEXECUTOR();
	/**
	 * Generated by ASSL Framework
	 * 
	 * Holds a reference to the FRIENDS class.
	 */
	public generatedbyassl.as.aes.host.FRIENDS FRIENDS = generatedbyassl.as.aes.host.FRIENDS.getInstance();
	/**
	 * Generated by ASSL Framework
	 * 
	 * Holds a reference to the AEIP class.
	 */
	public generatedbyassl.as.aes.host.AEIP AEIP = generatedbyassl.as.aes.host.AEIP.getInstance();

	/**
	 * Generated by ASSL Framework
	 * 
	 * Because this is a singleton class its constructor is private.
	 */
	private  HOST (  )
	{
		vPolicies.put( "SELF_HEALING", generatedbyassl.as.aes.host.aeself_management.SELF_HEALING.getInstance() );
		ACTIONS.put( "CHECKTOOL", generatedbyassl.as.aes.host.actions.CHECKTOOL.getInstance() );
		ACTIONS.put( "CHECKANTOOL", generatedbyassl.as.aes.host.actions.CHECKANTOOL.getInstance() );
		ACTIONS.put( "NOTIFYFORINACTIVETOOL", generatedbyassl.as.aes.host.actions.NOTIFYFORINACTIVETOOL.getInstance() );
		ACTIONS.put( "NOTIFYFORFUNCTIONALITY", generatedbyassl.as.aes.host.actions.NOTIFYFORFUNCTIONALITY.getInstance() );
		ACTIONS.put( "SIMULATEUNFUNCTIONALITY", generatedbyassl.as.aes.host.actions.SIMULATEUNFUNCTIONALITY.getInstance() );
		EVENTS.put( "UNFUNCTIONALITY", generatedbyassl.as.aes.host.events.UNFUNCTIONALITY.getInstance() );
		EVENTS.put( "ISMSGTOOLINACTIVESENT", generatedbyassl.as.aes.host.events.ISMSGTOOLINACTIVESENT.getInstance() );
		EVENTS.put( "TOOLINACTIVE", generatedbyassl.as.aes.host.events.TOOLINACTIVE.getInstance() );
		EVENTS.put( "TOOLCHECKED", generatedbyassl.as.aes.host.events.TOOLCHECKED.getInstance() );
		EVENTS.put( "TOOLNOTCHECKED", generatedbyassl.as.aes.host.events.TOOLNOTCHECKED.getInstance() );
		EVENTS.put( "TIMETOSENDFUNCTIONALITYMSG", generatedbyassl.as.aes.host.events.TIMETOSENDFUNCTIONALITYMSG.getInstance() );
		EVENTS.put( "FUNCTIONALITYMSGNOTSENT", generatedbyassl.as.aes.host.events.FUNCTIONALITYMSGNOTSENT.getInstance() );
		EVENTS.put( "ISMSGFUNCTIONALITYSENT", generatedbyassl.as.aes.host.events.ISMSGFUNCTIONALITYSENT.getInstance() );
		EVENTS.put( "TIMETOSIMULATEUNFUNCTIONALITY", generatedbyassl.as.aes.host.events.TIMETOSIMULATEUNFUNCTIONALITY.getInstance() );
		EVENTS.put( "HOSTINUNFUNCTIONAL", generatedbyassl.as.aes.host.events.HOSTINUNFUNCTIONAL.getInstance() );
		METRICS.put( "NETWORKMETRIC", generatedbyassl.as.aes.host.metrics.NETWORKMETRIC.getInstance() );
	}

	/**
	 * Generated by ASSL Framework
	 * 
	 * This method returns the unique instance of 'HOST' class.
	 */
	static public HOST getInstance (  )
	{
		if ( null == oInstance ) 
		{
			oInstance = new HOST();
		}
		return oInstance;
	}

	/**
	 * Generated by ASSL Framework
	 * 
	 * Sets the control loop components.
	 */
	protected void setControlLoop (  )
	{
		//**** This method overrides the super class's method.
		//****************************************************
		oMonitor.setMonitoredSLO(AESLO);
		oMonitor.setMonitoredMetrics(METRICS);
		oMonitor.setAnalyzer(oAnalyzer);
		oAnalyzer.setSimulator(oSimulator);
		oAnalyzer.setExecutor(oExecutor);
		oSimulator.setExecutor(oExecutor);
	}

	/**
	 * Generated by ASSL Framework
	 * 
	 * Performs the AE control loop.
	 */
	protected void controlLoop (  )
	{
		//**** This method overrides the super class's method.
		//****************************************************
		try
		{
			//**** control loops should not be very resource-consuming, thus it releases CPU for a while
			Thread.sleep(1000);
		}
		catch ( InterruptedException ex ) 
		{
			System.err.println( ex.getMessage() );
		}
		//**** performs AE control loop monitor-analyzer-simulator-executor
		oMonitor.perform();
		oAnalyzer.perform();
		oSimulator.perform();
		oExecutor.perform();
		//**** applies all the "switched-on" self-management policies for the AS
		applayPolicies();
	}

}